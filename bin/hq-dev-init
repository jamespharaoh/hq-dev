#!/usr/bin/env ruby

require "fileutils"

PROJECT = File.basename(Dir.pwd)
DEV_DIR = File.expand_path "../..", __FILE__

def shell cmd
	success = system cmd
	exit 1 unless success
end

def write_file name, lines

	File.open name, "w" do
		|file_io|

		lines.each do
			|line|

			file_io.puts line

		end

	end

end

def warn_if_not_exists name

	if File.exist? name

		puts "not touching #{name}"

	else

		puts "PLEASE CREATE: #{name}"

		found_problem = true

	end

end

def copy_if_not_exists from, to

	if File.exist? to

		puts "not touching #{to}"

	else

		puts "creating #{to}"

		FileUtils.copy_entry "#{DEV_DIR}/#{from}", to

	end

end

def copy_overwrite from, to

	puts "creating #{to}"

	FileUtils.copy_entry "#{DEV_DIR}/#{from}", to

end

def read_hash name

	return Hash[
		File.new(name)
			.to_a
			.map { |line| line.split " " }
	]

end

def write_hash name, hash

	File.open name, "w" do
		|file_io|

		hash.each do
			|key, value|

			file_io.write "%s %s\n" % [ key, value ]

		end

	end

end

def update_gem_versions path
	puts "updating versions in #{path}"
	write_hash path, Hash[
		read_hash(path)
			.map {
				|name, version|
				raise "no version for gem #{name}" \
					unless $gem_versions[name]
				[ name, $gem_versions[name] ]
			}
	]
end

$gem_versions =
	read_hash "#{DEV_DIR}/data/gem-versions"

copy_overwrite "templates/rakefile", "Rakefile"
copy_overwrite "templates/gemspec", "#{PROJECT}.gemspec"
copy_overwrite "templates/gemfile", "Gemfile"

copy_if_not_exists "templates/gitignore", ".gitignore"
copy_if_not_exists "templates/travis", ".travis.yml"

unless Dir.exist? ".hq-dev"
	puts "creating .hq-dev"
	FileUtils.mkdir ".hq-dev"
end

puts "creating .hq-dev/name"
write_file ".hq-dev/name", [ PROJECT ]

if File.exist? ".hq-dev/dependencies"
	update_gem_versions ".hq-dev/dependencies"
else
	puts "creating .hq-dev/dependencies"
	write_file ".hq-dev/dependencies", []
end

if File.exist? ".hq-dev/development-dependencies"
	update_gem_versions ".hq-dev/development-dependencies"
else
	puts "creating .hq-dev/development-dependencies"
	default_development_dependencies =
		File.new("#{DEV_DIR}/defaults/development-dependencies")
			.to_a
			.map { |line| line.strip }
			.map {
				|name|
				raise "no version for gem #{name}" \
					unless $gem_versions[name]
				"#{name} #{$gem_versions[name]}"
			}
	write_file \
		".hq-dev/development-dependencies",
		default_development_dependencies
end

found_problem = false

warn_if_not_exists ".hq-dev/description"
warn_if_not_exists ".hq-dev/full-name"

copy_if_not_exists "defaults/files", ".hq-dev/files"
copy_if_not_exists "defaults/test-files", ".hq-dev/test-files"

unless found_problem
	puts "done!"
end
